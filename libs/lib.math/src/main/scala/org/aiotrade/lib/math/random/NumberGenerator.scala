package org.aiotrade.lib.math.random

import java.util.concurrent.locks.ReentrantReadWriteLock


/**
 * Interface for providing different types of sequences of numbers.  This is
 * a simple but powerful abstraction that provides considerable flexibility
 * in implementing classes that require numeric configuration.  Refer to the
 * implementations in this package for examples of how it can be used.
 * @param <T> The type (Integer, Long, Double, etc.) of number to generate.
 * @author Daniel Dyer
 * @see ConstantGenerator
 * @see AdjustableNumberGenerator
 */
trait NumberGenerator[T] { // @todo T <: Number
  /**
   * @return The next value from the generator.
   */
  def nextValue: T
}

/**
 * Implementation of {@link NumberGenerator} that works similarly to
 * {@link ConstantGenerator} but allows the returned
 * value to be changed after instantiation.
 * The most useful application of this type of number generator is to permit
 * runtime re-configuration of objects that rely on {@link NumberGenerator}s
 * for their parameters.  This can be achieved by creating UI components (e.g.
 * sliders and spinners) that invoke {@link #setValue(Number)} when their state
 * changes. 
 * @param <T> The type of number generated by this number generator.
 * @param value The initial value returned by all invocations of {@link #nextValue()}
 * (until it is modified by a call to {@link #setValue(Number)}.
 * @author Daniel Dyer
 */
class AdjustableNumberGenerator[T](private var _value: T) extends NumberGenerator[T] {
  private final val lock = new ReentrantReadWriteLock()

  /**
   * Change the value that is returned by this generator.
   * @param value The new value to return.
   */
  def value_=(value: T) {
    try {
      lock.writeLock.lock
      this._value = value
    } finally {
      lock.writeLock.unlock
    }
  }

  def nextValue: T = {
    try {
      lock.readLock.lock
      _value
    } finally {
      lock.readLock.unlock
    }
  }
}

/**
 * Convenience implementation of {@link NumberGenerator} that always
 * returns the same value.
 * @param <T> The numeric type (Integer, Long, Double, etc.) of the constant.
 * @author Daniel Dyer
 */
class ConstantGenerator[T](constant: T) extends NumberGenerator[T] {
  def nextValue: T = constant
}