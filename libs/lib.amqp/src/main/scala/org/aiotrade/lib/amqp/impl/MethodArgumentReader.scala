//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   http://www.mozilla.org/MPL/
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developers of the Original Code are LShift Ltd,
//   Cohesive Financial Technologies LLC, and Rabbit Technologies Ltd.
//
//   Portions created before 22-Nov-2008 00:00:00 GMT by LShift Ltd,
//   Cohesive Financial Technologies LLC, or Rabbit Technologies Ltd
//   are Copyright (C) 2007-2008 LShift Ltd, Cohesive Financial
//   Technologies LLC, and Rabbit Technologies Ltd.
//
//   Portions created by LShift Ltd are Copyright (C) 2007-2009 LShift
//   Ltd. Portions created by Cohesive Financial Technologies LLC are
//   Copyright (C) 2007-2009 Cohesive Financial Technologies
//   LLC. Portions created by Rabbit Technologies Ltd are Copyright
//   (C) 2007-2009 Rabbit Technologies Ltd.
//
//   All Rights Reserved.
//
//   Contributor(s): ______________________________________.
//

package org.aiotrade.lib.amqp.impl

import java.io.DataInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;

/**
 * Parses AMQP wire-protocol {@link Method} arguments from a
 * DataInputStream. Methods on this object are usually called from
 * autogenerated code.
 *
 * @param The stream we are reading from.
 */
class MethodArgumentReader($in: DataInputStream) {
  /** The stream we are reading from. */
  private val in = new ValueReader($in)
  /** If we are reading one or more bits, holds the current packed collection of bits */
  private var bits: Int = 0
  /** If we are reading one or more bits, keeps track of which bit position we are reading from */
  private var bit: Int = 0x100

  /**
   * Private API - resets the bit group accumulator variables when
   * some non-bit argument value is to be read.
   */
  private def clearBits {
    bits = 0
    bit = 0x100
  }

  /** Public API - reads a short string argument. */
  @throws(classOf[IOException])
  final def readShortstr: String = {
    clearBits
    in.readShortstr
  }

  /** Public API - reads a long string argument. */
  @throws(classOf[IOException])
  final def readLongstr: LongString = {
    clearBits
    in.readLongstr
  }

  /** Public API - reads a short integer argument. */
  @throws(classOf[IOException])
  final def readShort: Int = {
    clearBits
    in.readShort
  }

  /** Public API - reads an integer argument. */
  @throws(classOf[IOException])
  final def readLong: Int = {
    clearBits
    in.readLong
  }

  /** Public API - reads a long integer argument. */
  @throws(classOf[IOException])
  final def readLonglong: Long = {
    clearBits
    in.readLonglong
  }

  /** Public API - reads a bit/boolean argument. */
  @throws(classOf[IOException])
  final def readBit: Boolean = {
    if (bit > 0x80) {
      bits = in.readOctet
      bit = 0x01
    }

    val result = (bits & bit) != 0;
    bit = bit << 1
    result
  }

  /** Public API - reads a table argument. */
  @throws(classOf[IOException])
  final def readTable: Map[String, _] = {
    clearBits
    in.readTable
  }

  /** Public API - reads an octet argument. */
  @throws(classOf[IOException])
  final def readOctet: Int = {
    clearBits
    in.readOctet
  }

  /** Public API - reads an timestamp argument. */
  @throws(classOf[IOException])
  final def readTimestamp: Date = {
    clearBits
    in.readTimestamp
  }
}
