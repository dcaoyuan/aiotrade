//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   http://www.mozilla.org/MPL/
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developers of the Original Code are LShift Ltd,
//   Cohesive Financial Technologies LLC, and Rabbit Technologies Ltd.
//
//   Portions created before 22-Nov-2008 00:00:00 GMT by LShift Ltd,
//   Cohesive Financial Technologies LLC, or Rabbit Technologies Ltd
//   are Copyright (C) 2007-2008 LShift Ltd, Cohesive Financial
//   Technologies LLC, and Rabbit Technologies Ltd.
//
//   Portions created by LShift Ltd are Copyright (C) 2007-2009 LShift
//   Ltd. Portions created by Cohesive Financial Technologies LLC are
//   Copyright (C) 2007-2009 Cohesive Financial Technologies
//   LLC. Portions created by Rabbit Technologies Ltd are Copyright
//   (C) 2007-2009 Rabbit Technologies Ltd.
//
//   All Rights Reserved.
//
//   Contributor(s): ______________________________________.
//

package org.aiotrade.lib.amqp.impl

import java.io.DataOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;

/**
 * Generates AMQP wire-protocol encoded arguments. Methods on this
 * object are usually called from autogenerated code.
 */
class MethodArgumentWriter($out: DataOutputStream) {
  /** Accumulates our output */
  private val out = new ValueWriter($out)
  /** When encoding one or more bits, records whether a group of bits is waiting to be written */
  private var needBitFlush = false
  /** The current group of bits */
  private var bitAccumulator: Byte = 0
  /** The current position within the group of bits */
  private var bitMask = 1

  /** Private API - called to reset the bit group variables. */
  private def resetBitAccumulator {
    needBitFlush = false
    bitAccumulator = 0
    bitMask = 1
  }

  /**
   * Private API - called when we may be transitioning from encoding
   * a group of bits to encoding a non-bit value.
   */
  @throws(classOf[IOException])
  private final def bitflush
  {
    if (needBitFlush) {
      out.writeOctet(bitAccumulator)
      resetBitAccumulator
    }
  }

  /** Public API - encodes a short string argument. */
  @throws(classOf[IOException])
  final def writeShortstr(str: String) {
    bitflush
    out.writeShortstr(str);
  }

  /** Public API - encodes a long string argument from a LongString. */
  @throws(classOf[IOException])
  final def writeLongstr(str: LongString) {
    bitflush
    out.writeLongstr(str);
  }

  /** Public API - encodes a long string argument from a String. */
  @throws(classOf[IOException])
  final def writeLongstr(str: String) {
    bitflush
    out.writeLongstr(str);
  }

  /** Public API - encodes a short integer argument. */
  @throws(classOf[IOException])
  final def writeShort(s: Int) {
    bitflush
    out.writeShort(s)
  }

  /** Public API - encodes an integer argument. */
  @throws(classOf[IOException])
  final def writeLong(l: Int) {
    bitflush
    out.writeLong(l);
  }

  /** Public API - encodes a long integer argument. */
  @throws(classOf[IOException])
  final def writeLonglong(ll: Long) {
    bitflush
    out.writeLonglong(ll)
  }

  /** Public API - encodes a boolean/bit argument. */
  @throws(classOf[IOException])
  def writeBit(b: Boolean) {
    if (bitMask > 0x80) {
      bitflush
    }
    if (b) {
      bitAccumulator = (bitAccumulator.toInt | bitMask).toByte
    } else {
      // um, don't set the bit.
    }
    bitMask = bitMask << 1
    needBitFlush = true
  }

  /** Public API - encodes a table argument. */
  @throws(classOf[IOException])
  final def writeTable(table: Map[String, _]) {
    bitflush
    out.writeTable(table)
  }

  /** Public API - encodes an octet argument from an int. */
  @throws(classOf[IOException])
  final def writeOctet(octet: Int) {
    bitflush
    out.writeOctet(octet)
  }

  /** Public API - encodes an octet argument from a byte. */
  @throws(classOf[IOException])
  final def writeOctet(octet: Byte) {
    bitflush
    out.writeOctet(octet)
  }

  /** Public API - encodes a timestamp argument. */
  @throws(classOf[IOException])
  final def writeTimestamp(timestamp: Date) {
    bitflush
    out.writeTimestamp(timestamp)
  }

  /**
   * Public API - call this to ensure all accumulated argument
   * values are correctly written to the output stream.
   */
  @throws(classOf[IOException])
  def flush {
    bitflush
    out.flush
  }
}
